### Instruction

You are Cursor AI configured for the **new‑himarte** project: a SvelteKit full‑stack app using Svelte 5, TypeScript, Tailwind CSS and Drizzle ORM. All responses must:

• Use idiomatic **Svelte 5 runes** ($state, $derived, $effect, $props, $bindable) — **never** legacy reactive statements ($:) or export let syntax.
• Follow SvelteKit conventions: file‑based routing, +page.ts/+page.server.ts for load/actions, +error.svelte for errors.
• Prioritize **SSR/SSG**, minimal client JS, lazy loading of heavy components.
• Adhere to TypeScript strict mode: interfaces > types, const objects > enums, annotate all returns.
• Use Tailwind utility classes via `cn()` from `$lib/utils`; avoid inline styles except dynamic via style directive.
• Leverage Drizzle ORM in server contexts: use typed queries in +page.server.ts and src/routes/api; validate inputs with Zod.

---

### Migration from Svelte 4 → Svelte 5

| Legacy                                 | Svelte 5                                                   | Reason                        |
| -------------------------------------- | ---------------------------------------------------------- | ----------------------------- |
| let count = 0; $: doubled = count \* 2 | let count = $state(0); let doubled = $derived(count \* 2); | Explicit reactivity via runes |
| export let userId                      | let { userId } = $props();                                 | Props via $props rune         |
| <slot>…</slot>                         | {@render children?.()}                                     | Snippets replace slots        |
| class-based component instantiation    | import Comp from './Comp.svelte';                          | Components no longer classes  |

---

### Project Structure

```
src/
  lib/
    components/
    utils/
    server/
      db.ts         # Drizzle client
  routes/
    api/           # REST endpoints
    +layout.svelte
    +page.svelte
    +page.server.ts
static/
svelte.config.js
vite.config.js
tsconfig.json
tailwind.config.cjs
```

---

### Naming & Conventions

- Files: **kebab-case** (components/auth-form.svelte).
- Component names: **PascalCase**.
- Variables/functions/props: **camelCase**.

---

### Svelte 5 Runes Quick Reference

```ts
// State
let count = $state(0);
let doubled = $derived(count * 2);
$effect(() => console.log(count));
let { userId } = $props();
let { bindableProp = $bindable() } = $props();
$inspect(count);
```

---

### Tailwind & Styling

- Use Tailwind classes only via `class={cn('p-4', condition && 'bg-blue-500')}`.
- Keep `tailwind.config.cjs` synced with design tokens.
- Use @tailwindcss/typography for prose.

---

### Drizzle ORM (src/lib/server/db.ts)

```ts
import { drizzle } from 'drizzle-orm/node-postgres';
import { Pool } from 'pg';
const pool = new Pool({ connectionString: process.env.DATABASE_URL });
export const db = drizzle(pool);
```

Use in +page.server.ts:

```ts
export const load = async () => ({ users: await db.select().from(users) });
```

---

### Routing & Data Fetching

- Dynamic route: src/routes/users/[id]/+page.server.ts
- Load function returns props for +page.svelte.
- Handle errors with `throw error(404, 'Not found')`.
- Prerender static pages: `export const prerender = true;`

---

### API Endpoints

```ts
// src/routes/api/users/+server.ts
import { db } from '$lib/server/db';
export async function GET() {
	return json(await db.select().from(users));
}
```

---

### Performance

- Lazy-load heavy components: `const Map = await import('$lib/components/Map.svelte');`
- Use <script context="module"> for non-reactive logic.
- Wrap lists in {#key id}…{/key}.

---

### SEO & Accessibility

- Use <svelte:head> for meta tags, og:url, canonical.
- Semantic HTML + ARIA labels.
- Keyboard navigation for all interactive elements.

---

### Error Handling

- In load/server: use try/catch, throw HTTP errors.
- +error.svelte displays friendly UI.

---

### Key Practices

1. Keep changes minimal; modify only related files.
2. Validate inputs with Zod in server code.
3. Preserve existing formatting; do not reformat legacy code.
4. Do not run terminal commands
